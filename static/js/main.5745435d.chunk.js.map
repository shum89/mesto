{"version":3,"sources":["images/Vector.svg","components/Header.js","contexts/CurrentUserContext.js","components/Card.js","components/Main.js","components/Footer.js","components/ImagePopup.js","components/PopupWithForm.js","utils/formHelper.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/ConfirmDeletePopup.js","components/Spinner.js","utils/constants.js","utils/GiphyApi.js","components/Page404.js","utils/Api.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","CurrentUserContext","React","createContext","Card","onCardClick","onCardLike","onCardDelete","card","name","link","likes","currentUser","useContext","isOwn","owner","_id","useState","counterAnimation","setCounterAnimation","cardDeleteButtonClassName","isLiked","some","like","cardLikeButtonClass","likeCounterClass","onClick","setTimeout","type","length","Main","cards","cardClick","onAddPlace","onEditProfile","onEditAvatar","onDeletePopup","about","avatar","map","key","Footer","ImagePopup","props","onClose","PopupWithForm","buttonTitle","children","title","isOpen","onSubmit","isDisabled","renderSubmitAnimation","reducerForForm","state","initialFormValueState","field","value","updateValues","inputValues","updatedValidities","inputValidities","validity","valid","updateErrors","inputErrors","validationMessage","formIsValid","formValid","nameValidity","aboutValidity","nameError","aboutError","reducerForEditProfileForms","action","Object","assign","EditProfilePopup","onUpdateUser","isSubmitting","currentUserValue","useReducer","formState","dispatchForm","buttonState","handleChange","e","target","useEffect","preventDefault","reset","id","placeholder","minLength","maxLength","pattern","required","onChange","EditAvatarPopup","onUpdateAvatar","avatarInput","useRef","avatarValidity","setAvatarValidity","setDisable","avatarErrorMessage","setAvatarErrorMessage","current","handleSubmit","ref","linkValidity","linkError","reducerForAddPlaceForm","AddPlacePopup","buttonDisabled","ConfirmDeletePopup","onDeleteSubmit","Spinner","urlPath","giphy","baseUrl","this","_url","fetch","then","res","ok","json","Promise","reject","Error","status","Page404","gif","setGif","randomGifRequest","fetchData","data","embed_url","catch","err","console","log","allowFullScreen","to","api","headers","_headers","path","params","_fetchData","method","body","JSON","stringify","authorization","App","setUserInfo","setCards","setSubmiting","isLoading","setLoading","isEditProfileOpen","setEditProfilePopup","isAddPlacePopupOpen","setAddPlacePopup","isEditAvatarPopupOpen","setEditAvatarPopup","isDeletePopupOpen","setDeletePopup","undefined","selectedCard","setSelectedCardPopup","selectedDeleteCard","setSelectedCard","all","getUserInfo","getInitialCards","userData","initialCards","closeAllPopups","handleDeleteCard","deleteCard","newCards","filter","i","basename","process","Provider","exact","setLike","newCard","c","updateUserInfo","result","updateUserAvatar","postNewCard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.5745435d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Vector.c6f11019.svg\";","import React from \"react\";\nimport logo from \"../images/Vector.svg\";\n\n/**\n * Header component\n * @return {JSX.Element}\n */\nfunction Header() {\n\n        return (\n            <header className=\"header\">\n                <img className=\"header__logo\" src={logo} alt=\"Логотип\"/>\n            </header>\n        )\n\n}\n\nexport default Header","import React from 'react';\n/**\ncontext for current user\n */\n\nexport const CurrentUserContext = React.createContext();","import React from \"react\";\nimport {CurrentUserContext} from \"../contexts/CurrentUserContext\";\n\n\n/**\n * card component\n * @param {object} prorps component props\n * @param {function} props.onCardClick handles click on card and opens modal window with card image\n * @param {function} props.onCardLike  handles click on like, toggles like and setting new like count\n * @param {function} props.onCardDelete  handles card delete\n * @param {Object} props.card card object\n * @returns {JSX.Element} Component Template\n */\nfunction Card ({onCardClick, onCardLike, onCardDelete, card}) {\n    /**\n     * destructured card prop\n     */\n    const {name = '', link = '', likes = []} = card;\n\n    /**\n     * Current user context\n     * @type {objec}\n     */\n\n    const currentUser = React.useContext(CurrentUserContext);\n    /**\n     * checks if card owner id corresponds with user id\n     * @type {boolean}\n     */\n    const isOwn = card.owner._id === currentUser._id;\n\n    /**\n     * state for an like counter animation\n     */\n    const [counterAnimation, setCounterAnimation] = React.useState(false);\n\n    /**\n     * class for a delete button\n     * @type {string}\n     */\n    const cardDeleteButtonClassName = (\n        `card__delete-button ${isOwn ? 'card__delete-button_visible' : 'card__delete-button_hidden'}`\n    );\n\n    /**\n     * checks if user liked a card\n     * @type {boolean}\n     */\n    const isLiked = likes.some((like) => like._id === currentUser._id);\n\n    /**\n     * card like button class\n     * @type {string}\n     */\n    const cardLikeButtonClass = (`card__like ${isLiked ? 'card__like_active' : null}`);\n\n    /**\n     * card like counter class\n     * @type {string}\n     */\n    const likeCounterClass = (`card__like-counter ${counterAnimation ? 'card__like-counter_animation' : null}`)\n\n    /**\n     * @method handleCardClick\n     * @description handles click on a card\n     */\n    const handleCardClick = () => {\n        onCardClick(card);\n    };\n\n    /**\n     * @method handleLikeClick\n     * @description handles click on like and sets and removes counter animation\n     */\n    const handleLikeClick = () => {\n        setCounterAnimation(true);\n        setTimeout(() => {\n            setCounterAnimation(false);\n        },500);\n        onCardLike(card);\n    };\n\n    /**\n     * @method handleDeleteCard\n     * @description handles card delete\n     */\n    const handleDeleteCard = () => {\n        onCardDelete(card);\n    };\n\n        return (\n            <li className=\"card\">\n                <img\n                    className=\"card__photo\"\n                    alt={name}\n                    src={link}\n                    onClick={handleCardClick}\n                />\n                <button className={cardDeleteButtonClassName} onClick={handleDeleteCard}/>\n                <div className=\"card__info-container\">\n                    <h2 className=\"card__title\">{name}</h2>\n                    <div className=\"card__like-container\">\n                        <button className={cardLikeButtonClass} onClick={handleLikeClick} type=\"button\"/>\n                        <p className={likeCounterClass}>{likes.length}</p>\n                    </div>\n                </div>\n            </li>\n        )\n}\n\nexport default Card","import React from \"react\";\nimport Card from \"./Card\";\nimport {CurrentUserContext} from \"../contexts/CurrentUserContext\";\n\n/**\n * main component\n * @param {object} props\n * @param {function} props.onEditAvatar - handles click on avatar and opens edit avatar popup\n * @param {function} props.onEditProfile - handles click on profile button and opens edit profile popup\n * @param {function} props.onAddPlace - handles click on addPlace button and opens add place popup\n * @param {function} props.cardClick - handles click on card image and opens image popup\n */\nfunction Main ({cards, cardClick, onAddPlace, onEditProfile, onEditAvatar, onCardLike, onDeletePopup}) {\n    /**\n     * current user context\n     * @type {object}\n     */\n    const currentUser = React.useContext(CurrentUserContext);\n    const {name, about, avatar} = currentUser;\n\n        return (\n            <main className=\"content\">\n\n                <section className=\"profile\">\n                    <div className=\"profile__wrap\">\n                        <div className=\"profile__avatar\"  onClick={onEditAvatar}>\n                            <img className=\"profile__avatar-image\" alt=\"Аватар\" src={avatar}/>\n                        </div>\n                        <div className=\"profile__info\">\n                            <div className=\"profile__text-container\">\n                                <h2 className=\"profile__title\">{name}</h2>\n                                <button className=\"profile__edit-button\" type=\"button\" onClick={onEditProfile}/>\n                            </div>\n                            <p className=\"profile__subtitle\">{about}</p>\n                        </div>\n                    </div>\n                    <button className=\"profile__add-button\" type=\"button\" onClick={onAddPlace}/>\n                </section>\n\n                    <ul className=\"cards\">\n                    {cards.map((card) => <Card card={card} key={card._id} onCardClick={cardClick} onCardLike={onCardLike} onCardDelete={onDeletePopup}/>)}\n                </ul>\n\n            </main>\n        )\n\n}\n\nexport default Main","import React from \"react\";\n\n/**\n * footer component\n * @return {JSX.Element}\n * @constructor\n */\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <p className=\"footer__title\">\n                &copy; 2020 Mesto Russia\n            </p>\n        </footer>\n    )\n}\n\nexport default Footer","import React from \"react\";\n\n/**\n * popup with image component\n * @param {Object} props\n * @param {Object} props.card - card object\n * @param {function} onClose - handler for closing popup\n * @return {JSX.Element}\n */\nfunction ImagePopup(props) {\n    const {\n        card,\n        card: {link, name} = {link: '', name: ''},\n        onClose,\n    } = props;\n    return (\n        <div className={`popup popup_type_image ${card ? 'popup_opened' : null}`}>\n            <figure className=\"popup__image-container\">\n                <button className=\"popup__button-close\" type=\"button\" onClick={onClose}/>\n                <img className=\"popup__photo\" src={link} alt={name}/>\n                <figcaption className=\"popup__caption\">{name}</figcaption>\n            </figure>\n            <div className=\"popup__overlay popup__overlay_image\" onClick={onClose}/>\n        </div>\n    )\n}\n\nexport default ImagePopup","import React from \"react\";\n\n/**\n * popup with form component\n * @property {Object} props\n * @property {string} props.buttonTitle - title of the submit button\n * @property {string} name - name for a popup class type\n * @property {string} title - title for a popup\n * @property {function} onClose - handler for closing popup\n * @property {Boolean} isOpen - popup state\n */\nfunction PopupWithForm({buttonTitle, children, name, title,\n                           onClose, isOpen, onSubmit, isDisabled,\n                           renderSubmitAnimation}){\n\n\n    return (\n        <div className={`popup popup_type_${name} ${isOpen ? 'popup_opened' : null}`}>\n            <div className=\"popup__container\">\n                <h2 className=\"popup__title\">{title}</h2>\n                <button className=\"popup__button-close\" onClick={onClose} type=\"button\"/>\n                <form className=\"popup__form\" name={name} onSubmit={onSubmit}>\n                    {children}\n                    <button className={`popup__button-submit popup__button-submit_action \n                    ${renderSubmitAnimation ? 'popup__button-submit_loading' : null}\n                    ${isDisabled ? null : 'popup__button-submit_disabled'}`\n                    }\n                            type=\"submit\">{buttonTitle}</button>\n                </form>\n            </div>\n            <div className=\"popup__overlay\" onClick={onClose}/>\n        </div>\n    )\n}\n\nexport default PopupWithForm","/**\n * helper function for a reducer to validate and dispatch values\n * @param state  state\n * @param action\n * @param action.field field name\n * @param action.type action type\n * @param action.value field value\n * @param initialFormValueState initial values\n * @returns {object} changed state\n */\n\nexport const reducerForForm = (state, {field, type, value}, initialFormValueState) => {\n    switch (type) {\n        case 'DISPATCH':\n            const updateValues = {\n                ...state.inputValues,\n                [field]: value.value,\n            }\n            const updatedValidities = {\n                ...state.inputValidities,\n                [`${field}Validity`]: value.validity.valid,\n            };\n            const updateErrors = {\n                ...state.inputErrors,\n                [`${field}Error`]: value.validationMessage\n            };\n            let formIsValid = true;\n            for (const key in updatedValidities) {\n                formIsValid = (formIsValid && updatedValidities[key])\n            }\n            return {\n                inputValidities: updatedValidities,\n                inputErrors: updateErrors,\n                formValid: formIsValid,\n                inputValues: updateValues,\n            };\n        case'RESET':\n            return initialFormValueState;\n        default:\n            break;\n    }\n};","import PopupWithForm from \"./PopupWithForm\";\nimport {CurrentUserContext} from \"../contexts/CurrentUserContext\";\nimport React from \"react\";\nimport {reducerForForm} from \"../utils/formHelper\"\n\n/**\n * initial state of form elements\n * @type {{inputValidities: {nameValidity: boolean, aboutValidity: boolean}, inputErrors: {nameError: string, aboutError: string}, formValid: boolean, inputValues: {name: string, about: string}}}\n */\nconst initialFormValueState = {\n    inputValues: {\n        name: '',\n        about:'',\n    },\n  inputValidities: {\n       nameValidity: true,\n       aboutValidity: true,\n   },\n    inputErrors: {\n      nameError: '',\n        aboutError: '',\n    },\n    formValid: false,\n}\n\n/**\n * reducer for a form\n * @param state\n * @param action\n * @returns {function} handler for reducer\n */\nfunction reducerForEditProfileForms(state, action) {\n    /**\n     * setting initial values from context\n     */\n    Object.assign(initialFormValueState.inputValues, action.currentUser);\n    return reducerForForm(state, action, initialFormValueState);\n}\n\n\n/**\n * modal window for editing profile info\n * @param {object} props\n * @param {function} props.onClose handles popup close\n * @param {function} props.onUpdateUser handles user info update\n * @param {function} props.isSubmitting handles form submit\n * @returns {JSX.Element}\n * @constructor\n */\nfunction EditProfilePopup({isOpen, onClose, onUpdateUser, isSubmitting}) {\n    /**\n     * current user context\n     * @type {object}\n     */\n    const currentUserValue = React.useContext(CurrentUserContext);\n\n    /**\n     * reducer hook for form elements\n     */\n    const [formState, dispatchForm] = React.useReducer(reducerForEditProfileForms, initialFormValueState);\n\n    /**\n     * destructured values for form elements\n     */\n    const {nameValidity, aboutValidity} = formState.inputValidities;\n    const {nameError, aboutError} = formState.inputErrors;\n    const {name, about} = formState.inputValues;\n    const buttonState = formState.formValid;\n\n    /**\n     * submit handler\n     * @param e\n     */\n    const handleSubmit = e => {\n        e.preventDefault();\n            onUpdateUser({\n            name,\n            about: about,\n        });\n            e.target.reset();\n    };\n\n    /**\n     * change input handler\n     * @param e\n     */\n    const handleChange = e => {\n        /**\n         * dispatching form with a certain action type\n         */\n        dispatchForm({\n            type: 'DISPATCH',\n            field: e.target.name,\n            value: e.target,\n            currentUser: currentUserValue,\n        })\n    };\n    /**\n     * hook for setting initial values\n     */\n    React.useEffect(() => {\n        /**\n         * reseting form with a certain action type\n         */\n        dispatchForm({\n            type:'RESET',\n            currentUser: currentUserValue,\n        })\n    }, [onClose,currentUserValue]);\n\n\n    return (\n        <PopupWithForm name={'edit-profile'} title={'Редактировать Профиль'}\n                       buttonTitle={'Cохранить'}\n                       isOpen={isOpen}\n                       onClose={onClose}\n                       onSubmit={handleSubmit}\n                       renderSubmitAnimation={isSubmitting}\n                       isDisabled={buttonState}\n        >\n            <label className=\"popup__form-label\">\n                <input className={`popup__input ${nameValidity ? null : 'popup__input_type_error'}`}\n                       id=\"title\"\n                       name=\"name\"\n                       type=\"text\"\n                       placeholder=\"ФИО\"\n                       minLength=\"2\"\n                       maxLength=\"20\"\n                       pattern=\"[a-zA-ZА-ЯЁа-яё\\s\\-]+\"\n                       required\n                       value={name}\n                       onChange={(e) => {\n                           handleChange(e)\n                       }}\n                       />\n                <span className={`popup__input-error`}  id=\"input-title-error\">{nameError}</span>\n            </label>\n            <label className=\"popup__form-label\">\n                <input className={`popup__input ${aboutValidity ? null : 'popup__input_type_error'}`}\n                       id=\"subtitle\"\n                       name=\"about\"\n                       type=\"text\"\n                       placeholder=\"Профессия\"\n                       minLength=\"2\"\n                       maxLength=\"200\"\n                       pattern=\"^[^\\s\\-].+[^\\s']$\"\n                       value={about}\n                       onChange={ (e) => {\n                           handleChange(e)\n                       }}\n                        required/>\n                <span className=\"popup__input-error\" id=\"input-subtitle-error\">{aboutError}</span>\n            </label>\n        </PopupWithForm>\n    );\n}\n\nexport default EditProfilePopup;","import React from 'react';\nimport PopupWithForm from \"./PopupWithForm\";\n\n/**\n * @param {object} props\n * @param {boolean} props.isOpen\n * @param {function} props.onClose close popup\n * @param {function} props.onUpdateAvatar handles avatar update\n * @param {boolean} props.isSubmitting checks if user submitting a form to trigger animation\n * @returns {JSX.Element}\n */\nfunction EditAvatarPopup({isOpen, onClose, onUpdateAvatar, isSubmitting}) {\n    /**\n     * ref for avatar input\n     * @type {React.MutableRefObject<undefined>}\n     */\n    const avatarInput = React.useRef();\n    /**\n     * avatar input form state\n     */\n    const [avatarValidity, setAvatarValidity] = React.useState(true)\n    const [isDisabled, setDisable] = React.useState(false);\n    const [avatarErrorMessage, setAvatarErrorMessage] = React.useState('');\n\n    /**\n     * submit hanlder\n     * @param e\n     */\n    function handleSubmit(e) {\n        e.preventDefault();\n        onUpdateAvatar({\n            avatar: avatarInput.current.value,\n        });\n        e.target.reset();\n    };\n\n    /**\n     * change handler\n     */\n    function handleChange () {\n        const {validity, validationMessage} = avatarInput.current\n        setAvatarValidity(validity.valid);\n        setAvatarErrorMessage(validationMessage);\n        setDisable(validity.valid);\n     }\n\n    /**\n     * reseting form on close\n     */\n    React.useEffect(() => {\n         setAvatarValidity(true);\n         setDisable(false);\n         setAvatarErrorMessage('')\n         avatarInput.current.value = '';\n    },[onClose])\n\n\n\n    return (\n        <PopupWithForm name={'edit-avatar'}\n                       title={'Обновить Аватар'}\n                       buttonTitle={'Сохранить'}\n                       isOpen={isOpen}\n                       onClose={onClose}\n                       onSubmit={(e) => {\n                           handleSubmit(e);\n                       }}\n                       renderSubmitAnimation={isSubmitting}\n                       isDisabled={isDisabled}\n        >\n            <label className=\"popup__form-label\">\n                <input ref={avatarInput}\n                       className={\n                           `popup__input ${avatarValidity ? null : 'popup__input_type_error'}`\n                       }\n                       id=\"input-title\"\n                       name=\"avatar\"\n                       type=\"url\"\n                       placeholder=\"Ссылка на картинку\"\n                       required\n                       onChange={handleChange}\n                />\n                <span className=\"popup__input-error\" id=\"input-title-error\">{avatarErrorMessage}</span>\n            </label>\n        </PopupWithForm>\n    );\n}\n\nexport default EditAvatarPopup;","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\nimport {reducerForForm} from '../utils/formHelper'\n\n/**\n * initial state of the form elements\n * @type {{inputValidities: {linkValidity: boolean, nameValidity: boolean}, inputErrors: {nameError: string, linkError: string}, formValid: boolean, inputValues: {name: string, link: string}}}\n */\nconst initialFormValueState = {\n    inputValues: {\n        name:'',\n        link: '',\n    },\n    inputValidities: {\n        nameValidity: true,\n        linkValidity: true,\n    },\n    inputErrors: {\n        nameError: '',\n        linkError: '',\n    },\n    formValid: false,\n}\n\nconst reducerForAddPlaceForm = (state, action) => {\n        return reducerForForm(state, action, initialFormValueState);\n}\n\n\n/**\n * modal window for adding place\n * @param {object} props\n * @param {function} props.onClose handles popup close\n * @param {function} props.onUpdateUser handles user info update\n * @param {function} props.isSubmitting handles form submit\n * @returns {JSX.Element}\n * @constructor\n */\nfunction AddPlacePopup({isOpen, onClose, onAddPlace, isSubmitting}) {\n    /**\n     * reducer hook for form elemnts\n     */\n    const [formState, dispatchForm] = React.useReducer(reducerForAddPlaceForm, initialFormValueState);\n\n    /**\n     * destructured values for form elements\n     */\n    const {name, link} = formState.inputValues;\n    const buttonDisabled = formState.formValid;\n    const {nameValidity, linkValidity} = formState.inputValidities;\n    const {nameError, linkError} = formState.inputErrors;\n\n    /**\n     * hadnler for form submit\n     * @param e\n     */\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onAddPlace({\n            name,\n            link,\n        })\n        e.target.reset();\n    }\n\n    /**\n     * handler for change inputs\n     * @param e\n     */\n    const handleChange = (e) => {\n        dispatchForm({\n            type: 'DISPATCH',\n            field: e.target.name,\n            value: e.target,\n        })\n    }\n\n    /**\n     * hook for form reset\n     */\n    React.useEffect( () => {\n        dispatchForm({\n            type:'RESET',\n        })\n    },[onClose])\n\n    return (\n        <PopupWithForm name={'add-card'}\n                       title={'Новое Место'}\n                       buttonTitle={'Создать'}\n                       isOpen={isOpen}\n                       onClose={onClose}\n                       onSubmit={handleSubmit}\n                       renderSubmitAnimation={isSubmitting}\n                       isDisabled={buttonDisabled}\n        >\n            <label className=\"popup__form-label\">\n                <input className={`popup__input ${nameValidity ? null : 'popup__input_type_error'}`}\n                       id=\"input-title\"\n                       name=\"name\"\n                       type=\"text\"\n                       placeholder=\"Название\"\n                       minLength=\"2\"\n                       maxLength=\"30\"\n                       required\n                       value={name}\n                       onChange={handleChange}\n                />\n                <span className=\"popup__input-error\" id=\"input-title-error\">{nameError}</span>\n            </label>\n            <label className=\"popup__form-label\">\n                <input className={`popup__input ${linkValidity ? null : 'popup__input_type_error'}`}\n                       id=\"input-subtitle\"\n                       name=\"link\"\n                       type=\"url\"\n                       placeholder=\"Ссылка на картинку\"\n                       required\n                       value={link}\n                       onChange={handleChange}\n                />\n                <span className={`popup__input-error`}\n                      id=\"input-subtitle-error\">{linkError}</span>\n            </label>\n        </PopupWithForm>\n    );\n}\n\nexport default AddPlacePopup;","import React from 'react';\nimport PopupWithForm from \"./PopupWithForm\";\n\n/**\n * modal window for card delete\n * @param {object} props\n * @param {function} props.onClose handles popup close\n * @param {function} props.onUpdateUser handles user info update\n * @param {boolean} props.isSubmitting checks if user submitting to set an animation\n * @param {object} props.card card element\n * @returns {JSX.Element}\n * @constructor\n */\n\nfunction ConfirmDeletePopup({isOpen, onClose, onDeleteSubmit, card, isSubmitting}) {\n\n    const handleDeleteSubmit = (e) => {\n        e.preventDefault();\n        onDeleteSubmit(card);\n    }\n\n    return (\n        <PopupWithForm name={'popup-delete'}\n                       title={'Вы уверены?'}\n                       buttonTitle={'Да'}\n                       isOpen={isOpen}\n                       onClose={onClose}\n                       onSubmit={handleDeleteSubmit}\n                       renderSubmitAnimation={isSubmitting}\n                       isDisabled={true}\n        />\n    );\n}\n\nexport default ConfirmDeletePopup;","import React from 'react';\n\n/**\n * spinner component for loading sreen\n * @return {JSX.Element}\n * @constructor\n */\nfunction Spinner() {\n    return (\n        <div className=\"spinner\">Loading...</div>\n    );\n}\n\nexport default Spinner;","/**\n * paths for requests\n * @type {{userInfo: string, cards: string, avatar: string, likes: string}}\n */\nexport const urlPath = {\n  userInfo: 'users/me/',\n  cards: 'cards/',\n  avatar: 'avatar',\n  likes: 'likes/',\n}\n/**\n * url for mesto api requests\n * @type {string}\n */\nexport const baseUrl = 'https://mesto.nomoreparties.co/v1/cohort-12/';\n\n/**\n *  headers with authorisation token\n * @type {{authorization: string, \"Content-Type\": string}}\n */\nexport const headers = {\n  authorization: 'd2854785-f942-4a21-9d80-03fbc6fb281b',\n      'Content-Type': 'application/json',\n};\n\n/**\n * base url for giphy api\n * @type {string}\n */\nexport const giphyUrl = `http://api.giphy.com/v1/gifs/random?tag=dogs&rating=g&api_key=xZXsHMfcYYAZ8rEhdSEGmIGqudaSbeg7`","import {giphyUrl} from \"./constants\";\n\n/**\n * class for giphy api\n * @param {string} baseUrl\n */\nclass GiphyApi {\n    constructor({baseUrl}) {\n        this._url = baseUrl;\n    }\n\n    /**\n     * fetch random gif\n     * @return {Promise<Response>}\n     */\n    fetchData() {\n        return fetch(`${this._url}`).then(res => {\n            if (res.ok) {\n                return res.json()\n            }\n            return Promise.reject(new Error(`Ошибка: ${res.status}`))\n        })\n    }\n\n}\n\nexport const giphy = new GiphyApi({\n    baseUrl: giphyUrl,\n})","import React from 'react';\nimport {Link} from \"react-router-dom\";\nimport {giphy} from '../utils/GiphyApi';\n\nfunction Page404() {\n    /**\n     * state for gif src\n     */\n    const [gif, setGif] = React.useState('');\n\n    /**\n     * request for a random gif\n     */\n    const randomGifRequest = () =>  {\n        giphy.fetchData()\n            .then((res) => {\n                setGif(res.data.embed_url);\n            }).catch((err) => {\n            console.log(err)\n        })\n    }\n\n\n    /**\n     * request for a random gif on loading\n     */\n    React.useEffect(() => {\n        randomGifRequest();\n    },[])\n\n\n    return (\n        <div className='page404'>\n        <h1 className='page404__title'>404</h1>\n        <p className='page404__subtitle'>Здесь можно немного отдохнуть</p>\n            <div className='page404__coub-wrap'>\n                <iframe className='page404__gif' title='random gif' src={gif} allowFullScreen/>\n            </div>\n\n<div className='page404__button-container'>\n    <Link to='/' className='page404__button'>Вернуться на Mesto</Link>\n    <button className='page404__button'  onClick={randomGifRequest}>Позалипать на собачек</button>\n</div>\n\n            </div>\n    )\n}\n\nexport default Page404;","import  {urlPath, baseUrl, headers} from './constants';\n\n/**\n *  Api for mesto\n *  @param {string} baseUrl\n *  @param {object} headers\n */\n class Api {\n    constructor({baseUrl, headers}) {\n        this._url = baseUrl;\n        this._headers = headers;\n    }\n\n    /**\n     * Basic method for fetching data\n     * @param path {string} - path for an api request\n     * @param params {Object} - object with headers, methods and body\n     * @returns {Promise<Response>} - returns promise if request is successful\n     */\n    _fetchData(path, params) {\n        return fetch(`${this._url}${path}`, params).then(res => {\n            if (res.ok) {\n                return res.json()\n            }\n           return Promise.reject(new Error(`Ошибка: ${res.status}`))\n        })\n    }\n\n    /**\n     * Get User info\n     * @returns {Promise<Response>} - object with user info\n     */\n    getUserInfo() {\n        return this._fetchData(urlPath.userInfo, {headers: this._headers})\n    }\n\n    /**\n     * update user info\n     * @param {object} data\n     * @return {Promise<Response>}\n     */\n    updateUserInfo(data) {\n        return this._fetchData(urlPath.userInfo, {\n            headers: this._headers,\n            method: 'PATCH',\n            body: JSON.stringify(data),\n        })\n    }\n\n    /**\n     * update user avatar\n     * @param {object} data\n     * @return {Promise<Response>}\n     */\n    updateUserAvatar(data) {\n        return this._fetchData(`${urlPath.userInfo}${urlPath.avatar}`, {\n            headers: this._headers,\n            method: 'PATCH',\n            body: JSON.stringify(data),\n        })\n    }\n\n    /**\n     * Gets initial cards\n     * @returns {Promise<Response>} - array of objects with cards info\n     */\n    getInitialCards() {\n        return this._fetchData(urlPath.cards, {headers: this._headers})\n    }\n\n    /**\n     * post new card\n     * @param {object} data\n     * @return {Promise<Response>}\n     */\n    postNewCard(data) {\n        return this._fetchData(urlPath.cards, {\n            headers: this._headers,\n            method: 'POST',\n            body: JSON.stringify(data)\n        })\n    }\n\n    /**\n     * delete card\n     * @param {string} card id\n     * @return {Promise<Response>}\n     */\n    deleteCard(id) {\n        return this._fetchData(`${urlPath.cards}${id}`, {\n            method: 'DELETE',\n            headers: this._headers,\n        });\n    }\n\n    /**\n     * set like\n     * @param {string} id card id\n     * @param {boolean} isLiked\n     * @return {Promise<Response>}\n     */\n    setLike(id, isLiked) {\n        let method;\n        if (isLiked) {\n            method = 'DELETE';\n        } else {\n            method = 'PUT';\n        }\n        return this._fetchData(`${urlPath.cards}${urlPath.likes}${id}`, {\n            method: method,\n            headers: this._headers,\n        });\n    }\n}\n\n\nexport const api = new Api({baseUrl, headers});\n","import React from 'react';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport '../index.css';\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport ImagePopup from \"./ImagePopup\";\nimport EditProfilePopup from \"./EditProfilePopup\";\nimport EditAvatarPopup from \"./EditAvatarPopup\";\nimport AddPlacePopup from \"./AddPlacePopup\";\nimport ConfirmDeletePopup from \"./ConfirmDeletePopup\";\nimport Spinner from \"./Spinner\";\nimport Page404 from \"./Page404\";\nimport {api} from \"../utils/Api\";\nimport {CurrentUserContext} from \"../contexts/CurrentUserContext\";\n\n/**\n * Create an app from the components\n * @returns {JSX.Element} - HTML-markup\n */\nfunction App() {\n    /**\n     * Current User State\n     */\n    const [currentUser, setUserInfo] = React.useState({\n        name:'',\n        avatar:'',\n        about:'',\n        _id:'',\n    });\n    /**\n     * Cards state\n     */\n    const [cards, setCards] = React.useState([]);\n\n/**\nState for waiting while loading data\n */\nconst [isSubmitting, setSubmiting] = React.useState(false);\nconst [isLoading, setLoading] = React.useState(false);\n\n    /**\n     * Popup with form states\n     */\n    const [isEditProfileOpen, setEditProfilePopup] = React.useState(false);\n    const [isAddPlacePopupOpen, setAddPlacePopup] = React.useState(false);\n    const [isEditAvatarPopupOpen, setEditAvatarPopup] = React.useState(false);\n    const [isDeletePopupOpen, setDeletePopup] = React.useState(false);\n\n    /**\n     * Popup with image state\n     */\n    const [selectedCard, setSelectedCardPopup] = React.useState(undefined);\n    const [selectedDeleteCard, setSelectedCard] = React.useState(undefined);\n\n\n    /**\n     * Set current user values and initial cards\n     */\n    React.useEffect( () => {\n        setLoading(true)\n        Promise.all([api.getUserInfo(), api.getInitialCards()]).then(([userData, initialCards]) => {\n            setUserInfo(userData);\n            setCards(initialCards);\n            setLoading(false);\n        }).catch((err) => {\n        console.log(err);\n        })\n    }, [])\n\n\n    /**\n     *  handles user click on a card\n     * @param {Object} card - card object that corresponds to a card that user clicked on\n     */\n    const handleCardClick = card => {\n        setSelectedCardPopup(card);\n    };\n    /**\n     * handles user click on avatar\n     */\n    const handleEditAvatarClick = () => {\n       setEditAvatarPopup(true);\n    };\n    /**\n     * handles user click on profile edit button\n     */\n    const handleEditProfileClick = () => {\n    setEditProfilePopup(true);\n  };\n\n    /**\n     * handles user click on add place button\n     */\n    const handleAddPlaceClick = () => {\n    setAddPlacePopup(true);\n  };\n\n  const handleDeletePopupClick = (card) => {\n        setDeletePopup(true);\n        setSelectedCard(card);\n    }\n\n   /**\n    * closes all popups\n    */\n\n  const closeAllPopups  = () => {\n      setAddPlacePopup(false);\n      setEditAvatarPopup(false);\n      setEditProfilePopup(false);\n      setSelectedCardPopup(undefined);\n      setDeletePopup(false)\n  }\n\n    /**\n     * update user info\n     * @param data {object}\n     */\n\n  const handleUpdateUser = (data) => {\n      setSubmiting(true);\n      api.updateUserInfo(data).then((result) => {\n          setUserInfo(result);\n          closeAllPopups();\n          setSubmiting(false);\n      }).catch((err) => {\n          console.log(err)\n      })\n    }\n\n    /**\n     * update user avatar\n     * @param data {object}\n     */\n\n    const handleUpdateAvatar = (data) => {\n        setSubmiting(true);\n      api.updateUserAvatar(data).then((result) => {\n          setUserInfo(result);\n          closeAllPopups();\n          setSubmiting(false);\n      }).catch((err) => {\n          console.log(err)\n      })\n    }\n\n    /**\n     * handle card likes\n     * @param card {object}\n     */\n    const handleCardLike = (card) => {\n        const isLiked = card.likes.some((i) => i._id === currentUser._id);\n        api.setLike(card._id, isLiked).then((newCard) => {\n            const newCards = cards.map((c) => {\n                return c._id === card._id ? newCard : c;\n            });\n            setCards(newCards);\n        }).catch((err) => {\n            console.log(err)\n        })\n    };\n\n    /**\n     * handle card delete\n     * @param card {object}\n     */\n\n    const handleDeleteCard = (card) => {\n        setSubmiting(true);\n        api.deleteCard(card._id).then(() => {\n            const newCards = cards.filter(i => i._id !== card._id);\n            setCards(newCards);\n            closeAllPopups();\n            setSubmiting(false);\n        }).catch((err) => {\n            console.log(err);\n        })\n    }\n\n    /**\n     * handle add card\n     * @param data {object}\n     */\n    const handleAddPlaceSubmit = (data) => {\n        setSubmiting(true);\n        api.postNewCard(data).then((newCard) => {\n            setCards([newCard,...cards]);\n            closeAllPopups();\n            setSubmiting(false);\n        }).catch((err) => {\n            console.log(err)\n        })\n    }\n\n\n  return (\n      <HashRouter basename={process.env.PUBLIC_URL}>\n      <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <Header/>\n        <Switch>\n            <Route exact path={'/'}>\n          {isLoading ? <Spinner/> : <Main onAddPlace={handleAddPlaceClick}\n              onEditProfile={handleEditProfileClick}\n              onEditAvatar={handleEditAvatarClick}\n              cardClick={handleCardClick}\n              cards={cards}\n              onCardDelete={handleDeleteCard}\n              onCardLike={handleCardLike}\n              onDeletePopup={handleDeletePopupClick}\n              />}\n            </Route>\n            <Route path={'*'}>\n                <Page404/>\n            </Route>\n        </Switch>\n\n        <Footer/>\n\n          <ConfirmDeletePopup\n              isOpen={isDeletePopupOpen}\n              onClose={closeAllPopups}\n            onDeleteSubmit={handleDeleteCard}\n              card={selectedDeleteCard}\n              isSubmitting={isSubmitting}\n          />\n\n      <EditProfilePopup isOpen={isEditProfileOpen}\n                        onClose={closeAllPopups}\n                        onUpdateUser={handleUpdateUser}\n                        isSubmitting={isSubmitting}\n      />\n\n      <EditAvatarPopup isOpen={isEditAvatarPopupOpen}\n                       onClose={closeAllPopups}\n                       onUpdateAvatar={handleUpdateAvatar}\n                       isSubmitting={isSubmitting}\n      />\n\n      <AddPlacePopup isOpen={isAddPlacePopupOpen}\n                     onClose={closeAllPopups}\n                     onAddPlace={handleAddPlaceSubmit}\n                     isSubmitting={isSubmitting}\n      />\n\n\n          <ImagePopup card={selectedCard}\n                      onClose={closeAllPopups}/>\n\n      </div>\n      </CurrentUserContext.Provider>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}