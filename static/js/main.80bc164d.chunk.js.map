{"version":3,"sources":["components/Header.js","utils/constants.js","utils/Api.js","components/Card.js","components/Main.js","components/Footer.js","components/PopupWithForm.js","components/ImagePopup.js","components/App.js","serviceWorker.js","index.js","images/Vector.svg"],"names":["Header","className","src","logo","alt","urlPath","api","baseUrl","headers","this","_url","_headers","path","params","fetch","then","res","ok","json","Promise","reject","Error","status","_fetchData","data","method","body","JSON","stringify","id","isLiked","authorization","Card","handleCardClick","props","onCardClick","card","name","link","onClick","type","likes","length","React","Component","Main","state","userName","userDescription","userAvatar","cards","all","getUserInfo","getInitialCards","userData","setState","about","avatar","catch","err","console","log","cardClick","onAddPlace","onEditProfile","onEditAvatar","map","key","_id","Footer","PopupWithForm","buttonTitle","onClose","children","title","isOpen","ImagePopup","App","useState","isEditProfileOpen","setEditProfilePopup","isAddPlacePopupOpen","setAddPlacePopup","isEditAvatarPopupOpen","setEditAvatarPopup","undefined","selectedCard","setSelectedCardPopup","closeAllPopups","placeholder","required","minLength","maxLength","pattern","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.80bc164d.chunk.js","sourcesContent":["import React from \"react\";\nimport logo from \"../images/Vector.svg\";\n\n/**\n * Header component\n * @returns {string} - HTML-markup for a Header\n */\nfunction Header() {\n\n        return (\n            <header className=\"header\">\n                <img className=\"header__logo\" src={logo} alt=\"Логотип\"/>\n            </header>\n        )\n\n}\n\nexport default Header","/**\n * paths for requests\n * @type {{userInfo: string, cards: string, avatar: string, likes: string}}\n */\nexport const urlPath = {\n  userInfo: 'users/me/',\n  cards: 'cards/',\n  avatar: 'avatar',\n  likes: 'likes/',\n}\n/**\n * url for an api requests\n * @type {string}\n */\nexport const baseUrl = 'https://mesto.nomoreparties.co/v1/cohort-12/';\n\n/**\n *  headers with authorisation token\n * @type {{authorization: string, \"Content-Type\": string}}\n */\nexport const headers = {\n  authorization: 'd2854785-f942-4a21-9d80-03fbc6fb281b',\n      'Content-Type': 'application/json',\n};","import  {urlPath, baseUrl, headers} from './constants';\n\n/**\n * @class Api\n * @classdesc class for an api requests\n */\n class Api {\n    constructor({baseUrl, headers}) {\n        this._url = baseUrl;\n        this._headers = headers;\n    }\n\n    /**\n     * Basic method for fetching data\n     * @param path {string} - path for an api request\n     * @param params {Object} - object with headers, methods and body\n     * @returns {Promise<Response>} - returns promise if request is successful\n     * @private\n     */\n    _fetchData(path, params) {\n        return fetch(`${this._url}${path}`, params).then(res => {\n            if (res.ok) {\n                return res.json()\n            }\n           return Promise.reject(new Error(`Ошибка: ${res.status}`))\n        })\n    }\n\n    /**\n     * Get User info\n     * @returns {Promise<Response>} - object with user info\n     */\n    getUserInfo() {\n        return this._fetchData(urlPath.userInfo, {headers: this._headers})\n    }\n\n\n    updateUserInfo(data) {\n        return this._fetchData(urlPath.userInfo, {\n            headers: this._headers,\n            method: 'PATCH',\n            body: JSON.stringify(data),\n        })\n    }\n// меняем аватар\n    updateUserAvatar(data) {\n        return this._fetchData(`${urlPath.userInfo}${urlPath.avatar}`, {\n            headers: this._headers,\n            method: 'PATCH',\n            body: JSON.stringify(data),\n        })\n    }\n\n    /**\n     * Gets initial cards\n     * @returns {Promise<Response>} - array of objects with cards info\n     */\n    getInitialCards() {\n        return this._fetchData(urlPath.cards, {headers: this._headers})\n    }\n// добавляем карточку\n    postNewCard(data) {\n        return this._fetchData(urlPath.cards, {\n            headers: this._headers,\n            method: 'POST',\n            body: JSON.stringify(data)\n        })\n    }\n// удаляем карточку\n    deleteCard(id) {\n        return this._fetchData(`${urlPath.cards}${id}`, {\n            method: 'DELETE',\n            headers: this._headers,\n        });\n    }\n    // ставим лайк или убираем\n    like(id, isLiked) {\n        let method;\n        if (isLiked) {\n            method = 'DELETE';\n        } else {\n            method = 'PUT';\n        }\n        return this._fetchData(`${urlPath.cards}${urlPath.likes}${id}`, {\n            method: method,\n            headers: this._headers,\n        });\n    }\n}\n\n\nexport const api = new Api({baseUrl, headers});\n","import React from \"react\";\n\n/**\n * Card component\n * @property {Object} props\n * @property {Object} props.card - card object\n * @property {string} props.card.name - card title\n * @property {string} props.card.link - card image link\n * @property {Array} props.card.likes - array of likes\n */\nclass Card extends React.Component {\n\n    /**\n     * @method handleCardClick\n     * @description handles click on a card\n     */\n     handleCardClick = () => {\n        this.props.onCardClick(this.props.card)\n    }\n\n    render() {\n        const {card} = this.props;\n        return (\n            <li className=\"card\">\n                <img\n                    className=\"card__photo\"\n                    alt={card.name}\n                    src={card.link}\n                    onClick={this.handleCardClick}\n                />\n                <button className=\"card__delete-button\"></button>\n                <div className=\"card__info-container\">\n                    <h2 className=\"card__title\">{card.name}</h2>\n                    <div className=\"card__like-container\">\n                        <button className=\"card__like\" type=\"button\"></button>\n                        <p className=\"card__like-counter\">{card.likes.length}</p>\n                    </div>\n                </div>\n            </li>\n        )\n    }\n}\n\nexport default Card","import React from \"react\";\nimport {api} from \"../utils/Api\";\nimport Card from \"./Card\";\n\n\n\n\n/**\n * @class Main\n * @classdesc renders content such as profile and cards sections\n * @property {function} props.onEditAvatar - handles click on avatar and opens edit avatar popup\n * @property {function} props.onEditProfile - handles click on profile button and opens edit profile popup\n * @property {function} props.onAddPlace - handles click on addPlace button and opens add place popup\n * @property {function} props.cardClick - handles click on card image and opens image popup\n * @property {Object} state\n * @property {string} state.userName - user name\n * @property {string} state.userDescription - user occupation\n * @property {string} state.userAvatar - link to an user avatar image\n * @property {Array} state.cards - array of cards objects\n */\nclass Main extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: '',\n            userDescription: '',\n            userAvatar: '',\n            cards: [],\n        }\n    }\n\n    /** @method componentDidMount\n     * @description - handles Promise.All that gets user info and initial cards\n     */\n    componentDidMount() {\n        Promise.all([api.getUserInfo(),api.getInitialCards()])\n            .then(([userData, cards]) => {\n                this.setState({\n                    userName: userData.name,\n                    userDescription: userData.about,\n                    userAvatar: userData.avatar,\n                    cards: cards,\n                })\n            }).catch((err) => {\n                console.log(err)\n        })\n    }\n\n    render() {\n        const {cardClick, onAddPlace, onEditProfile, onEditAvatar} = this.props;\n        const {userName, userAvatar, cards, userDescription} = this.state;\n        return (\n\n            <main className=\"content\">\n                <section className=\"profile\">\n                    <div className=\"profile__wrap\">\n                        <div className=\"profile__avatar\"  onClick={onEditAvatar}>\n                            <img className=\"profile__avatar-image\" alt=\"Аватар\" src={userAvatar}/>\n                        </div>\n                        <div className=\"profile__info\">\n                            <div className=\"profile__text-container\">\n                                <h2 className=\"profile__title\">{userName}</h2>\n                                <button className=\"profile__edit-button\" type=\"button\" onClick={onEditProfile}/>\n                            </div>\n                            <p className=\"profile__subtitle\">{userDescription}</p>\n                        </div>\n                    </div>\n                    <button className=\"profile__add-button\" type=\"button\" onClick={onAddPlace}/>\n                </section>\n\n                <ul className=\"cards\">\n                    {cards.map((card) =>\n                        <Card card={card} key={card._id} onCardClick={cardClick} />) }\n                </ul>\n\n            </main>\n        )\n    }\n\n}\n\nexport default Main","import React from \"react\";\n\n/**\n * Footer components\n * @returns {string} - HTML-markup for a Footer\n */\nfunction Footer() {\n    return (\n        <footer className=\"footer\">\n            <p className=\"footer__title\">\n                &copy; 2020 Mesto Russia\n            </p>\n        </footer>\n    )\n}\n\nexport default Footer","import React from \"react\";\n\n/**\n * popup with form component\n * @property {Object} props\n * @property {string} props.buttonTitle - title of the submit button\n * @property {string} name - name for a popup class type\n * @property {string} title - title for a popup\n * @property {function} onClose - handler for closing popup\n * @property {Boolean} isOpen - popup state\n */\nclass PopupWithForm extends React.Component {\n\n    render() {\n        const {buttonTitle, onClose, children, name, title, isOpen} = this.props;\n        return (\n            <div className={`popup popup_type_${name} ${isOpen ? 'popup_opened' : ''}`}>\n                    <div className=\"popup__container\">\n                        <h2 className=\"popup__title\">{title}</h2>\n                        <button className=\"popup__button-close\" onClick={onClose} type=\"button\"/>\n                        <form className=\"popup__form\" name={name}>\n                            {children}\n                            <button className=\"popup__button-submit popup__button-submit_action\" type=\"submit\">{buttonTitle}</button>\n                        </form>\n                    </div>\n                    <div className=\"popup__overlay\" onClick={onClose}/>\n                </div>\n        )\n        }\n\n}\nexport default PopupWithForm","import React from \"react\";\n\n/**\n * popup with image component\n * @property {Object} props\n * @property {Object} props.card - card object\n * @property {string} props.card.name - title of an image\n * @property {string} props.card.link - link for an image\n * @property {function} onClose - handler for closing popup\n */\nclass ImagePopup extends React.Component {\n\n    render() {\n            const {\n                card,\n                card: {link, name} = {link: '', name: ''},\n                onClose,\n            } = this.props;\n\n        return (\n            <div className={`popup popup_type_image ${card ? 'popup_opened' : ''}`}>\n                <figure className=\"popup__image-container\">\n                    <button className=\"popup__button-close\" type=\"button\" onClick={onClose}></button>\n                    <img className=\"popup__photo\" src={`${link}`} alt={name}/>\n                    <figcaption className=\"popup__caption\">{name}</figcaption>\n                </figure>\n                <div className=\"popup__overlay popup__overlay_image\" onClick={onClose}/>\n            </div>\n        )\n    }\n\n}\n\nexport default ImagePopup","import React from 'react';\nimport Header from \"./Header\";\nimport Main from \"./Main\";\nimport Footer from \"./Footer\";\nimport '../index.css';\nimport PopupWithForm from \"./PopupWithForm\";\nimport ImagePopup from \"./ImagePopup\";\n\n/**\n * Create an app from the components\n * @returns {string} - HTML-markup\n * @constructor\n */\nfunction App() {\n   /**\n    * Popup with form states\n    */\n    const [isEditProfileOpen, setEditProfilePopup] = React.useState(false);\nconst [isAddPlacePopupOpen, setAddPlacePopup] = React.useState(false);\nconst [isEditAvatarPopupOpen, setEditAvatarPopup] = React.useState(false);\n\n    /**\n     * Popup with image state\n     */\n    const [selectedCard, setSelectedCardPopup] = React.useState(undefined);\n\n/**\n *  handles user click on a card\n * @param {Object} card - card object that corresponds to a card that user clicked on\n */\n\nfunction handleCardClick(card) {\n    setSelectedCardPopup(card)\n}\n/**\n * handles user click on avatar\n */\n  function handleEditAvatarClick ()  {\n     setEditAvatarPopup(true);\n  }\n    /**\n     * handles user click on profile edit button\n     */\n    function handleEditProfileClick  ()  {\n    setEditProfilePopup(true);\n  }\n\n    /**\n     * handles user click on add place button\n     */\n    function handleAddPlaceClick ()  {\n    setAddPlacePopup(true);\n  }\n\n   /**\n    * closes all popups\n    */\n\n  function closeAllPopups () {\n      setAddPlacePopup(false);\n      setEditAvatarPopup(false);\n      setEditProfilePopup(false);\n      setSelectedCardPopup(undefined);\n  }\n\n  return (\n      <div className=\"page\">\n        <Header/>\n        <Main onAddPlace={handleAddPlaceClick}\n              onEditProfile={handleEditProfileClick}\n              onEditAvatar={handleEditAvatarClick}\n              cardClick={handleCardClick} />\n        <Footer/>\n          <PopupWithForm name={'popup-delete'} title={'Вы уверены?'} buttonTitle={'Да'} isOpen={false} ></PopupWithForm>\n\n          <PopupWithForm name={'edit-avatar'} title={'Обновить Аватар'} buttonTitle={'Сохранить'} isOpen={isEditAvatarPopupOpen} onClose={closeAllPopups}>\n              <label className=\"popup__form-label\">\n                  <input className=\"popup__input\" id=\"input-title\" name=\"avatar\" type=\"url\" placeholder=\"Ссылка на картинку\"\n                         required/>\n                  <span className=\"popup__input-error\" id=\"input-title-error\"></span>\n              </label>\n          </PopupWithForm>\n\n          <PopupWithForm name={'edit-profile'} title={'Редактировать Профиль'} buttonTitle={'Cохранить'} isOpen={isEditProfileOpen} onClose={closeAllPopups}>\n              <label className=\"popup__form-label\">*/}\n                  <input className=\"popup__input\" id=\"input-title\" name=\"name\" type=\"text\" placeholder=\"ФИО\" minLength=\"2\"\n                         maxLength=\"20\" pattern=\"[a-zA-ZА-ЯЁа-яё\\s\\-]+\" required/>\n                  <span className=\"popup__input-error\" id=\"input-title-error\"> </span>\n              </label>\n              <label className=\"popup__form-label\">\n                  <input className=\"popup__input\" id=\"input-subtitle\" name=\"occupation\" type=\"text\" placeholder=\"Профессия\"\n                         minLength=\"2\" maxLength=\"200\" pattern=\"^[^\\s\\-].+[^\\s']$\" required/>\n                  <span className=\"popup__input-error\" id=\"input-subtitle-error\"> </span>\n              </label>\n          </PopupWithForm>\n\n          <PopupWithForm name={'add-card'} title={'Новое Место'} buttonTitle={'Создать'} isOpen={isAddPlacePopupOpen} onClose={closeAllPopups}>\n              <label className=\"popup__form-label\">\n                  <input className=\"popup__input\" id=\"input-title\" name=\"name\" type=\"text\" placeholder=\"Название\" minLength=\"1\"\n                         maxLength=\"30\" required/>\n                  <span className=\"popup__input-error\" id=\"input-title-error\"></span>\n              </label>\n              <label className=\"popup__form-label\">\n                  <input className=\"popup__input\" id=\"input-subtitle\" name=\"link\" type=\"url\" placeholder=\"Ссылка на картинку\"\n                         required/>\n                  <span className=\"popup__input-error\" id=\"input-subtitle-error\"></span>\n              </label>\n          </PopupWithForm>\n\n          <ImagePopup card={selectedCard} onClose={closeAllPopups}/>\n\n\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Vector.c6f11019.svg\";"],"sourceRoot":""}